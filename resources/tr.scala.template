package %s

import android.app.{Activity,Dialog}
import android.view.{View,ViewGroup,LayoutInflater}

case class TypedResource[A](id: Int) extends AnyVal
case class TypedLayout[A](id: Int) extends AnyVal

final object TR {
%s

  final object layout {
%s
  }
}

trait TypedFindView extends Any {
  protected def findViewById(id: Int): View
  final def findView[A](tr: TypedResource[A]): A = findViewById(tr.id).asInstanceOf[A]
}

final object TypedResource {
  implicit class TypedView(val v: View) extends AnyVal with TypedFindView {
    def findViewById(id: Int) = v.findViewById(id)
  }
  implicit class TypedActivity(val a: Activity) extends AnyVal with TypedFindView {
    def findViewById(id: Int) = a.findViewById(id)
  }
  implicit class TypedDialog(val d: Dialog) extends AnyVal with TypedFindView {
    def findViewById(id: Int) = d.findViewById(id)
  }
  implicit class TypedLayoutInflater(val l: LayoutInflater) extends AnyVal {
    def inflate[A <: View](tl: TypedLayout[A], c: ViewGroup, b: Boolean): A = {
      val v = l.inflate(tl.id, c, b)
      val a = if(c != null && b) c.getChildAt(c.getChildCount - 1) else v
      a.asInstanceOf[A]
    }
    def inflate[A <: View](tl: TypedLayout[A], c: ViewGroup): A =
      inflate(tl, c, true)
    def inflate[A <: View](tl: TypedLayout[A]): A =
      inflate(tl, null, false)
  }
}

